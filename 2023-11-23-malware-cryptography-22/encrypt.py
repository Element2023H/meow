import argparse

def xor(data, key):
    key = str(key)
    l = len(key)
    output_str = ""

    for i in range(len(data)):
        current = data[i]
        current_key = key[i % len(key)]
        ordd = lambda x: x if isinstance(x, int) else ord(x)
        output_str += chr(ordd(current) ^ ord(current_key))

    return output_str

def xor_encrypt(data, key):
    ciphertext = xor(data, key)
    ciphertext = '{ 0x' + ', 0x'.join(hex(ord(x))[2:] for x in ciphertext) + ' };'
    print (data, ciphertext)
    return ciphertext, key

key = "meowmeowmeowmeow"

f_ntop = "NtOpenProcess"
f_ntcs = "NtCreateSection"
f_ntmvos = "NtMapViewOfSection"
f_wfso = "WaitForSingleObject"
f_rcut = "RtlCreateUserThread"
f_clh = "CloseHandle"
f_zw = "ZwUnmapViewOfSection"

k32_name = "kernel32"
ntdll_name = "ntdll"

ciphertext_ntop, ntop_key = xor_encrypt(f_ntop, key)
ciphertext_ntcs, ntcs_key = xor_encrypt(f_ntcs, key)
ciphertext_ntmvos, ntmvos_key = xor_encrypt(f_ntmvos, key)
ciphertext_rcut, rcut_key = xor_encrypt(f_rcut, key)
ciphertext_wfso, wfso_key = xor_encrypt(f_wfso, key)
ciphertext_clh, clh_key = xor_encrypt(f_clh, key)
ciphertext_zw, zw_key = xor_encrypt(f_zw, key)
ciphertext_k32, k32_key = xor_encrypt(k32_name, key)
ciphertext_ntd, ntd_key = xor_encrypt(ntdll_name, key)

